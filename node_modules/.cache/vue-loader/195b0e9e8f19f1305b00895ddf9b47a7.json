{"remainingRequest":"/Users/gdezheleha/Documents/refresh/refresh/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/gdezheleha/Documents/refresh/refresh/src/components/BaseInput/index.vue?vue&type=style&index=0&id=137336bc&scoped=true&lang=scss&","dependencies":[{"path":"/Users/gdezheleha/Documents/refresh/refresh/src/components/BaseInput/index.vue","mtime":1574171001041},{"path":"/Users/gdezheleha/Documents/refresh/refresh/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/gdezheleha/Documents/refresh/refresh/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/gdezheleha/Documents/refresh/refresh/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/gdezheleha/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/gdezheleha/Documents/refresh/refresh/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/gdezheleha/Documents/refresh/refresh/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouYmFzZS1pbnB1dCB7CiAgICB3aWR0aDogMTAwJTsKCiAgICBsYWJlbCB7CiAgICAgICAgY29sb3I6ICM0MzQzNDM7CiAgICAgICAgZm9udC1mYW1pbHk6ICJDZW50dXJ5IEdvdGhpYyI7CiAgICAgICAgZm9udC1zaXplOiAxNnB4OwogICAgICAgIGZvbnQtd2VpZ2h0OiA3MDA7CiAgICAgICAgbGluZS1oZWlnaHQ6IDI3cHg7CiAgICB9Cn0KCmlucHV0IHsKICAgIGhlaWdodDogMzZweDsKfQoKLmFzdGVyaXNrIHsKICAgICY6OmFmdGVyIHsKICAgICAgICBjb250ZW50OiAiKiI7CiAgICAgICAgY29sb3I6ICNiNDQyODQ7CiAgICAgICAgZm9udC1mYW1pbHk6IENhbGlicmk7CiAgICAgICAgZm9udC13ZWlnaHQ6IDQwMDsKICAgICAgICBmb250LXNpemU6IDE2cHg7CiAgICAgICAgLypmbG9hdDogbGVmdDsqLwogICAgfQp9CgoucmVxdWlyZWQtZmllbGQgewogICAgYm9yZGVyLWNvbG9yOiAjOWRiNDg4Owp9Cg=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiHA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"index.vue","sourceRoot":"src/components/BaseInput","sourcesContent":["<template>\n    <div class=\"form-group base-input\">\n        <label :for=\"reference\" :class=\"[validation && validation.required && text ? 'asterisk' : '']\">{{text}}</label>\n        <!-- autocomplete=\"off\"-->\n        <input\n                v-if=\"mask\"\n                v-mask=\"mask\"\n                type=\"text\"\n                :class=\"['form-control',validation && validation.required ? 'required-field' : '']\"\n                :id=\"reference\"\n                :placeholder=\"placeholder\"\n                :ref=\"reference\"\n                :value=\"value\"\n                @input=\"$emit('input', $event.target.value)\"\n                :name=\"reference\"\n                v-validate=\"validation\"\n                :readonly=\"readonly\"\n                :disabled=\"disabled\"\n\n        >\n        <input\n                v-else\n                type=\"text\"\n                :class=\"['form-control',validation && validation.required ? 'required-field' : '']\"\n                :id=\"reference\"\n                :placeholder=\"placeholder\"\n                :ref=\"reference\"\n                :value=\"value\"\n                @input=\"$emit('input', $event.target.value)\"\n                :name=\"reference\"\n                v-validate=\"validation\"\n                :readonly=\"readonly\"\n                :disabled=\"disabled\"\n\n        >\n        <p class=\"hints\" v-if=\"isShownHint\">{{hint}}</p>\n        <span class=\"error-msg\">{{errors.first(reference)}}</span>\n    </div>\n</template>\n\n<script>\n// import MaskedInput from 'vue-text-mask'\n\nexport default {\n  // components: {\n  //     MaskedInput,\n  // },\n  data () {\n    return {\n      // dirty: false,\n    }\n  },\n  inject: ['$validator'],\n  methods: {\n    saveInfo (val) {\n      this.$emit('input', val)\n    }\n  },\n  props: {\n    hint: {\n      type: String\n    },\n    text: {\n      type: String,\n      required: true\n    },\n    reference: {\n      type: String,\n      required: true\n    },\n    value: String,\n    readonly: {\n      default: false,\n      type: Boolean\n    },\n    validation: {\n      type: Object\n\n    },\n    placeholder: {\n      type: String\n\n    },\n    mask: {\n      type: String,\n      default: null\n    },\n    disabled: {\n      default: false,\n      type: Boolean\n    }\n  },\n  computed: {\n    dirty () {\n      if (this.$validator.fields.find({ name: this.reference })) { return this.$validator.fields.find({ name: this.reference }).flags.dirty }\n      return false\n    },\n    valid () {\n      if (this.$validator.fields.find({ name: this.reference })) { return this.$validator.fields.find({ name: this.reference }).flags.valid }\n      return false\n    },\n    untouched () {\n      if (this.$validator.fields.find({ name: this.reference })) { return this.$validator.fields.find({ name: this.reference }).flags.touched }\n      return false\n    },\n    isShownHint () {\n      return this.hint && !this.errors.has(this.reference) && (!this.dirty || this.untouched) && !this.valid\n    }\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n    .base-input {\n        width: 100%;\n\n        label {\n            color: #434343;\n            font-family: \"Century Gothic\";\n            font-size: 16px;\n            font-weight: 700;\n            line-height: 27px;\n        }\n    }\n\n    input {\n        height: 36px;\n    }\n\n    .asterisk {\n        &::after {\n            content: \"*\";\n            color: #b44284;\n            font-family: Calibri;\n            font-weight: 400;\n            font-size: 16px;\n            /*float: left;*/\n        }\n    }\n\n    .required-field {\n        border-color: #9db488;\n    }\n</style>\n"]}]}